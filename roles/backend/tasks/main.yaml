# - name: Configured backend server
#   hosts: backend
#   become: yes  
#   tasks:
  - name: Disable current nodejs
    ansible.builtin.command: dnf module disable nodejs -y

  - name: enable nodejs 20
    ansible.builtin.command: dnf module enable nodejs:20 -y

  - name: Install nodejs
    ansible.builtin.package:
      name: "{{ item }}"
      state: present
    loop:
    - nodejs
    - mysql
  
  - name: Create Expense user
    ansible.builtin.user:
      name: expense

  - name: include from common role
    include_role:
      name: common
      tasks_from: main

  # - name: Create app directory
  #   ansible.builtin.file:
  #     path: /app
  #     state: directory
  
  # - name: Download backend code
  #   ansible.builtin.get_url:
  #     url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
  #     dest: /tmp/backend.zip

  # - name: Unzip backend code
  #   ansible.builtin.unarchive:
  #     src: /tmp/backend.zip
  #     dest: /app
  #     remote_src: yes

  - name: Install dependencies
    community.general.npm:
      path: /app

  - name: Copy backend Service
    ansible.builtin.template: # It will search for the file in templates folder
      src: backend.service.j2
      dest: /etc/systemd/system/backend.service

  - name: Install Python binaries to connect mysql #Installing Python libraries using loop to connect mysql
    ansible.builtin.pip:
      name: "{{ item }}"
      executable: pip3.9
    loop:
      - PyMySQL
      - cryptography

  - name: Import sql data
    community.mysql.mysql_db:
      state: import
      name: all
      login_user: "{{ MYSQL_USER }}"
      login_password: "{{ MYSQL_PASSWORD }}"
      login_host: "{{ MYSQL_HOST }}"
      target: /app/schema/backend.sql

  - name: daemon reload and restart service
    tags:
    - restartbackendserver
    ansible.builtin.systemd_service:
      enabled: true
      state: restarted  
      daemon_reload: true
      name: backend




